// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}
var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_upload_fb1ace5b54ab2aa2, []int{0}
}

type UploadRequestType struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Filename             string   `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequestType) Reset()         { *m = UploadRequestType{} }
func (m *UploadRequestType) String() string { return proto.CompactTextString(m) }
func (*UploadRequestType) ProtoMessage()    {}
func (*UploadRequestType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_fb1ace5b54ab2aa2, []int{0}
}
func (m *UploadRequestType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequestType.Unmarshal(m, b)
}
func (m *UploadRequestType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequestType.Marshal(b, m, deterministic)
}
func (dst *UploadRequestType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequestType.Merge(dst, src)
}
func (m *UploadRequestType) XXX_Size() int {
	return xxx_messageInfo_UploadRequestType.Size(m)
}
func (m *UploadRequestType) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequestType.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequestType proto.InternalMessageInfo

func (m *UploadRequestType) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UploadRequestType) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type UploadResponseType struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=proto.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadResponseType) Reset()         { *m = UploadResponseType{} }
func (m *UploadResponseType) String() string { return proto.CompactTextString(m) }
func (*UploadResponseType) ProtoMessage()    {}
func (*UploadResponseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_fb1ace5b54ab2aa2, []int{1}
}
func (m *UploadResponseType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponseType.Unmarshal(m, b)
}
func (m *UploadResponseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponseType.Marshal(b, m, deterministic)
}
func (dst *UploadResponseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponseType.Merge(dst, src)
}
func (m *UploadResponseType) XXX_Size() int {
	return xxx_messageInfo_UploadResponseType.Size(m)
}
func (m *UploadResponseType) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponseType.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponseType proto.InternalMessageInfo

func (m *UploadResponseType) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadResponseType) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterType((*UploadRequestType)(nil), "proto.UploadRequestType")
	proto.RegisterType((*UploadResponseType)(nil), "proto.UploadResponseType")
	proto.RegisterEnum("proto.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RkUploaderServiceClient is the client API for RkUploaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RkUploaderServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (RkUploaderService_UploadFileClient, error)
}

type rkUploaderServiceClient struct {
	cc *grpc.ClientConn
}

func NewRkUploaderServiceClient(cc *grpc.ClientConn) RkUploaderServiceClient {
	return &rkUploaderServiceClient{cc}
}

func (c *rkUploaderServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (RkUploaderService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RkUploaderService_serviceDesc.Streams[0], "/proto.rkUploaderService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rkUploaderServiceUploadFileClient{stream}
	return x, nil
}

type RkUploaderService_UploadFileClient interface {
	Send(*UploadRequestType) error
	CloseAndRecv() (*UploadResponseType, error)
	grpc.ClientStream
}

type rkUploaderServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *rkUploaderServiceUploadFileClient) Send(m *UploadRequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rkUploaderServiceUploadFileClient) CloseAndRecv() (*UploadResponseType, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RkUploaderServiceServer is the server API for RkUploaderService service.
type RkUploaderServiceServer interface {
	UploadFile(RkUploaderService_UploadFileServer) error
}

func RegisterRkUploaderServiceServer(s *grpc.Server, srv RkUploaderServiceServer) {
	s.RegisterService(&_RkUploaderService_serviceDesc, srv)
}

func _RkUploaderService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RkUploaderServiceServer).UploadFile(&rkUploaderServiceUploadFileServer{stream})
}

type RkUploaderService_UploadFileServer interface {
	SendAndClose(*UploadResponseType) error
	Recv() (*UploadRequestType, error)
	grpc.ServerStream
}

type rkUploaderServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *rkUploaderServiceUploadFileServer) SendAndClose(m *UploadResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rkUploaderServiceUploadFileServer) Recv() (*UploadRequestType, error) {
	m := new(UploadRequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RkUploaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rkUploaderService",
	HandlerType: (*RkUploaderServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _RkUploaderService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upload.proto",
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor_upload_fb1ace5b54ab2aa2) }

var fileDescriptor_upload_fb1ace5b54ab2aa2 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xcd, 0xa2, 0x5b, 0x3b, 0x16, 0x49, 0xe7, 0x62, 0xec, 0xa9, 0xf4, 0xb4, 0x28, 0xf4,
	0xd0, 0x3e, 0xc2, 0x42, 0xc1, 0x83, 0x08, 0xa9, 0x05, 0xc1, 0x53, 0x74, 0x07, 0x59, 0x76, 0x4d,
	0x62, 0x92, 0x55, 0x7c, 0x7b, 0x69, 0x42, 0xd4, 0xf6, 0x14, 0xfe, 0xf9, 0x92, 0x2f, 0x7f, 0x02,
	0x93, 0xc1, 0xf6, 0x46, 0x35, 0x4b, 0xeb, 0x4c, 0x30, 0x78, 0x16, 0x97, 0xc5, 0x1d, 0x4c, 0x77,
	0x71, 0x2c, 0xe9, 0x63, 0x20, 0x1f, 0x1e, 0xbf, 0x2d, 0xa1, 0x80, 0x51, 0x6d, 0x74, 0x20, 0x1d,
	0x04, 0x9b, 0xb3, 0x6a, 0x22, 0x73, 0xc4, 0x19, 0x9c, 0x6f, 0xda, 0x9e, 0xb4, 0x7a, 0x27, 0x51,
	0xcc, 0x59, 0x35, 0x96, 0xbf, 0x79, 0xf1, 0x0c, 0x98, 0x55, 0xde, 0x1a, 0xed, 0x29, 0xbb, 0xee,
	0xc9, 0x7b, 0xf5, 0x46, 0xd1, 0x35, 0x96, 0x39, 0xe2, 0x2d, 0x9c, 0xd6, 0xa6, 0x49, 0x9e, 0xcb,
	0xd5, 0x55, 0xea, 0xb5, 0x4c, 0x8a, 0x6d, 0x50, 0x61, 0xf0, 0x7b, 0x2c, 0xe3, 0xa6, 0x9b, 0x35,
	0xf0, 0x63, 0x82, 0x17, 0x30, 0xda, 0xe9, 0x4e, 0x9b, 0x2f, 0xcd, 0x4f, 0xb0, 0x84, 0xe2, 0xa1,
	0xe3, 0x0c, 0x01, 0xca, 0x8d, 0x6a, 0x7b, 0x6a, 0x78, 0xb1, 0x7a, 0x82, 0xa9, 0xeb, 0xd2, 0x31,
	0x72, 0x5b, 0x72, 0x9f, 0xed, 0x2b, 0x61, 0x0d, 0x90, 0x46, 0xfb, 0xe2, 0x28, 0x0e, 0xae, 0xfd,
	0xf7, 0x09, 0xb3, 0xeb, 0x23, 0xf2, 0xf7, 0xa6, 0x8a, 0xbd, 0x94, 0x91, 0xad, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xd3, 0xf9, 0xac, 0x17, 0x54, 0x01, 0x00, 0x00,
}
